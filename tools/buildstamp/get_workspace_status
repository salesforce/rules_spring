#
# Copyright (c) 2017-2021, salesforce.com, inc.
# All rights reserved.
# Licensed under the BSD 3-Clause license.
# For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
#

# This script is executed with every 'bazel build' command if .bazelrc (or included file)
# has these settings:
#   build --stamp
#   build --workspace_status_command tools/buildstamp/get_workspace_status
# Which enables Bazel *stamping* for every build.

# This script writes Git data to::
#   bazel-out/volatile-status.txt
#   bazel-out/stable-status.txt
# If anything in stable-status.txt changes, it will trigger a rebuild of any target that
#   has stamp=1 as an attribute (such as the Spring Boot rule).
# Changes to volatile-status.txt do not trigger rebuilds of those targets.
#
# More information:
# Bazel stamping: https://docs.bazel.build/versions/master/user-manual.html#flag--workspace_status_command
# Spring Boot git.properties:  //springboot/write_gitinfo_properties.sh
# Spring Boot info actuator endpoint: ttps://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints


# ********************************
# ********************************
# TEST FOR FULL STAMPING
# ********************************
# ********************************

# if IS_RELEASE_BUILD=true or the file full_stamp.txt exists, full stamping is enabled

if [ "$IS_RELEASE_BUILD" = true ]; then
  echo "IS_RELEASE_BUILD environment variable set: $IS_RELEASE_BUILD"
else
  if [[ ! -f full_stamp.txt ]]; then
    echo "full_stamp.txt file was not detected"
    exit 0
  fi
  echo "full_stamp.txt file detected"
fi
echo "Full Bazel build stamping enabled. Adding Git properties to stamp. See //tools/buildstamp for details."


# ********************************
# GIT
# ********************************

# This data is then later consumed by the //springboot rule (perhaps other rules as well) to write
#   a git.properties file into the Spring Boot jar, which is then surfaced in the Spring Boot
#   actuator info endpoint.

# BUILD ENVIRONMENT PROPERTIES
# git.build.user.email
git_email=$(git config --get user.email)
if [[ $? == 0 ]];
then
  echo "git.build.user.email $git_email"
fi

# git.build.host
git_build_host=$(hostname)
echo "git.build.host $git_build_host"

# git.build.time
git_build_time=$(date -u '+%Y-%m-%d @ %H\:%M\:%S -0000')
if [[ $? == 0 ]];
then
  echo "git.build.time $git_build_time"
fi


# BRANCH PROPERTIES
# git.branch
git_branch=$(git rev-parse --abbrev-ref HEAD)
if [[ $? == 0 ]];
then
  echo "STABLE_git.branch $git_branch"
fi

# dirty? (modified files in branch when built)
git diff-index --quiet HEAD --
if [[ $? == 0 ]];
then
    git_status="false"
else
    git_status="true"
fi
echo "STABLE_git.dirty $git_status"

# git.remote.origin.url
git_remote_url=$(git config --get remote.origin.url)
if [[ $? == 0 ]];
then
  echo "STABLE_git.remote.origin.url $git_remote_url"
fi


# LAST COMMIT PROPERTIES

# git.commit.user.email  (email of last commit author)
git_commit_email=$(git log -1 --pretty=format:'%ae')
if [[ $? == 0 ]];
then
  echo "STABLE_git.commit.user.email $git_commit_email"
fi

# git.commit.user.name
git_commit_author=$(git log -1 --pretty=format:'%an')
if [[ $? == 0 ]];
then
  echo "STABLE_git.commit.user.name $git_commit_author"
fi

# git.commit.id.sha
git_commit_id=$(git log -1 --pretty=format:'%H')
if [[ $? == 0 ]];
then
  echo "STABLE_git.commit.id.sha $git_commit_id"
fi

# git.commit.id.abbrev
git_commit_id_short=$(git log -1 --pretty=format:'%h')
if [[ $? == 0 ]];
then
  echo "STABLE_git.commit.id.abbrev $git_commit_id_short"
fi

# git.commit.time
git_commit_time=$(git log -1 --pretty=format:'%ai')
if [[ $? == 0 ]];
then
  echo "STABLE_git.commit.time $git_commit_time"
fi

# git.commit.message.short (just going with commit 'status' here)
git_commit_msg=$(git log -1 --pretty=format:'%s')
if [[ $? == 0 ]];
then
  echo "STABLE_git.commit.message.short $git_commit_msg"
fi

# git.commit.id.describe
git_commit_describe=$(git describe)
if [[ $? == 0 ]];
then
  echo "STABLE_git.commit.id.describe $git_commit_describe"
fi

# git.closest.tag.name
git_closest_tag=$(git describe --abbrev=0)
if [[ $? == 0 ]];
then
  echo "STABLE_git.closest.tag.name $git_closest_tag"
fi
